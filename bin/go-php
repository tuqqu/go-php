#!/usr/bin/env php
<?php

declare(strict_types=1);

use GoPhp\EnvVarSet;
use GoPhp\ErrorHandler\StreamWriter;
use GoPhp\ExitCode;
use GoPhp\Interpreter;
use GoPhp\Stream\ResourceOutputStream;

use const GoPhp\VERSION;

use function GoPhp\Debug\dump_call_stack;

const AUTOLOAD_PATHS = [
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
];

function require_autoload(array $paths): void
{
    foreach ($paths as $path) {
        if (file_exists($path)) {
            require $path;

            return;
        }
    }

    exit_with_error('install dependencies using Composer.');
}

function exit_with_error(string $msg): never
{
    fwrite(STDERR, sprintf("error: %s\n", $msg));

    exit(1);
}

function print_help(): void
{
    fwrite(STDOUT, sprintf(<<<HELP
    go-php - Go interpreter written in PHP (version: %s)
    
    USAGE: 
        go-php [flags] <arguments>
        go-php [flags]
        
    EXAMPLE:
        go-php hello.go
        go-php -e 'println("Hello, World!")'
        go-php --goroot=/usr/local/go --gopath=~/go hello.go
    
    FLAGS:
        -h, --help          Print help message
        -v, --version       Print version
        -e, --eval          Evaluate given code
        --goroot            Set GOROOT environment variable
        --gopath            Set GOPATH environment variable
        --dump-stack-trace  Dump stack trace on error

    HELP, VERSION));
}

function print_version(): void
{
    fwrite(STDOUT, sprintf("go-php %s\n", VERSION));
}

enum Flag: string
{
    case Help = 'help';
    case Version = 'version';
    case Eval = 'eval';
    case Goroot = 'goroot';
    case Gopath = 'gopath';
    case DumpStackTrace = 'dump-stack-trace';

    private const array FLAGS_WITH_VALUE = [
        self::Goroot,
        self::Gopath,
    ];

    private const array FLAGS_WITHOUT_VALUE = [
        self::Help,
        self::Version,
        self::Eval,
        self::DumpStackTrace,
    ];

    /**
     * @return null|array{self, string|null}
     */
    public static function tupleFromString(string $str): ?array
    {
        foreach (self::FLAGS_WITHOUT_VALUE as $flag) {
            if (
                $str === sprintf('--%s', $flag->value)
                || $str === sprintf('-%s', $flag->value[0])
            ) {
                return [$flag, null];
            }
        }

        foreach (self::FLAGS_WITH_VALUE as $flag) {
            $flagValue = $flag->extractValue($str);

            if ($flagValue !== null) {
                return [$flag, $flagValue];
            }
        }

        if (str_starts_with($str, '-')) {
            exit_with_error(sprintf('unrecognised option "%s"', $str));
        }

        return null;
    }

    private function extractValue(string $str): ?string
    {
        if (!str_starts_with($str, sprintf('--%s=', $this->value))) {
            return null;
        }

        $value = substr($str, strlen($this->value) + 3);

        if ($value === '') {
            exit_with_error(sprintf('invalid value for flag "%s"', $this->value));
        }

        return $value;
    }
}

/**
 * @param list<string> $argv
 */
function main(array $argv): never
{
    unset($argv[0]);
    $file = null;
    $goroot = EnvVarSet::DEFAULT_GOROOT;
    $gopath = EnvVarSet::DEFAULT_GOPATH;
    $eval = false;
    $script = null;
    $dumpTrace = false;

    foreach ($argv as $arg) {
        if ($eval) {
            $script = $arg;
            $eval = false;

            continue;
        }

        [$flag, $value] = Flag::tupleFromString($arg);

        switch ($flag) {
            case Flag::Help:
                print_help();
                exit(0);
            case Flag::Version:
                print_version();
                exit(0);
            case Flag::Goroot:
                $goroot = $value;
                break;
            case Flag::Gopath:
                $gopath = $value;
                break;
            case Flag::Eval:
                $eval = true;
                break;
            case Flag::DumpStackTrace:
                $dumpTrace = true;
                break;
            default:
                $file = $arg;
                break 2;
        }
    }

    if ($file === null && $script === null) {
        print_help();
        exit(0);
    }

    $stderr = new ResourceOutputStream(STDERR);
    $errorHandler = new StreamWriter($stderr);

    $runtime = Interpreter::create(
        source: $script !== null ? $script : null,
        errorHandler: $errorHandler,
        envVars: new EnvVarSet(
            goroot: $goroot,
            gopath: $gopath,
        ),
        filename: $file,
        toplevel: $script !== null,
        debug: $dumpTrace,
    );

    $result = $runtime->run();

    if ($dumpTrace && $result->exitCode === ExitCode::Failure) {
        $callStack = $result->debugger?->getCallStack();

        fwrite(STDERR, "\n");
        dump_call_stack($callStack);
    }

    exit($result->exitCode->value);
}

error_reporting(E_ALL);
require_autoload(AUTOLOAD_PATHS);
main($argv);
